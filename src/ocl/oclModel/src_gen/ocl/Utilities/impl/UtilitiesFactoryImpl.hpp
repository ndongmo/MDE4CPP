//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_UTILITIESFACTORYIMPL_HPP
#define OCL_UTILITIESFACTORYIMPL_HPP

#include "ecore/impl/EFactoryImpl.hpp"

#include "ocl/Utilities/UtilitiesFactory.hpp"

namespace Utilities 
{
}

namespace ocl::Utilities 
{
	class UtilitiesFactoryImpl : virtual public ecore::EFactoryImpl , virtual public UtilitiesFactory 
	{
		private:    
			UtilitiesFactoryImpl(UtilitiesFactoryImpl const&) = delete;
			UtilitiesFactoryImpl& operator=(UtilitiesFactoryImpl const&) = delete;

		protected:
			friend class UtilitiesFactory;
			// Constructor
			UtilitiesFactoryImpl();

		public:
			virtual ~UtilitiesFactoryImpl();
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const;

			//Creator functions
			 

		private:
			static UtilitiesFactory* create();
            std::map<std::string,int> m_idMap;
	};
}
#endif /* end of include guard: OCL_UTILITIESFACTORYIMPL_HPP */
