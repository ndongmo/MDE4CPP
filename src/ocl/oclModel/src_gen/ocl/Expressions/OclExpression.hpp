//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_EXPRESSIONS_OCLEXPRESSION_HPP
#define OCL_EXPRESSIONS_OCLEXPRESSION_HPP

#include <list>
#include <memory>
#include <string>


// forward declarations



//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace ocl
{
	class oclFactory;
}

//Forward Declaration for used types
namespace ocl::Expressions 
{
	class CallExp;
}

namespace ocl::Expressions 
{
	class CollectionRange;
}

namespace ecore 
{
	class EAnnotation;
}

namespace ecore 
{
	class EClassifier;
}

namespace ecore 
{
	class EGenericType;
}

namespace ecore 
{
	class EObject;
}

namespace ecore 
{
	class ETypedElement;
}

namespace ocl::Expressions 
{
	class ExpressionInOcl;
}

namespace ocl::Expressions 
{
	class IfExp;
}

namespace ocl::Expressions 
{
	class LoopExp;
}

namespace ocl::Expressions 
{
	class NavigationCallExp;
}

namespace ocl::Evaluations 
{
	class OclExpEval;
}

namespace ocl::Expressions 
{
	class OperationCallExp;
}

namespace ocl::Expressions 
{
	class Variable;
}

// base class includes
#include "ecore/ETypedElement.hpp"

// enum includes


//*********************************
namespace ocl::Expressions 
{
	
	class OclExpression:virtual public ecore::ETypedElement
	{
		public:
 			OclExpression(const OclExpression &) {}

		protected:
			OclExpression(){}


			//Additional constructors for the containments back reference

			OclExpression(std::weak_ptr<ocl::Expressions::CallExp > par_appliedElement);

			//Additional constructors for the containments back reference

			OclExpression(std::weak_ptr<ecore::EObject > par_eContainer);

			//Additional constructors for the containments back reference

			OclExpression(std::weak_ptr<ocl::Expressions::IfExp > par_IfExp, const int reference_id);

			//Additional constructors for the containments back reference

			OclExpression(std::weak_ptr<ocl::Expressions::CollectionRange > par_CollectionRange, const int reference_id);

			//Additional constructors for the containments back reference


			//Additional constructors for the containments back reference

			OclExpression(std::weak_ptr<ocl::Expressions::Variable > par_initializedElement);

			//Additional constructors for the containments back reference


			//Additional constructors for the containments back reference

			OclExpression(std::weak_ptr<ocl::Expressions::LoopExp > par_loopBodyOwner);

			//Additional constructors for the containments back reference

			OclExpression(std::weak_ptr<ocl::Expressions::OperationCallExp > par_parentCall);

			//Additional constructors for the containments back reference

			OclExpression(std::weak_ptr<ocl::Expressions::NavigationCallExp > par_parentNav);

			//Additional constructors for the containments back reference


			//Additional constructors for the containments back reference

			OclExpression(std::weak_ptr<ocl::Expressions::ExpressionInOcl > par_topExpression);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~OclExpression() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			
			virtual std::weak_ptr<ocl::Expressions::CallExp > getAppliedElement() const = 0;
			
			
			virtual void setAppliedElement(std::shared_ptr<ocl::Expressions::CallExp> _appliedElement) = 0;
			
			
			virtual std::weak_ptr<ocl::Expressions::IfExp > getElseOwner() const = 0;
			
			
			virtual void setElseOwner(std::shared_ptr<ocl::Expressions::IfExp> _elseOwner) = 0;
			
			
			virtual std::weak_ptr<ocl::Expressions::CollectionRange > getFirstOwner() const = 0;
			
			
			virtual void setFirstOwner(std::shared_ptr<ocl::Expressions::CollectionRange> _firstOwner) = 0;
			
			
			virtual std::weak_ptr<ocl::Expressions::IfExp > getIfOwner() const = 0;
			
			
			virtual void setIfOwner(std::shared_ptr<ocl::Expressions::IfExp> _ifOwner) = 0;
			
			
			virtual std::weak_ptr<ocl::Expressions::Variable > getInitializedElement() const = 0;
			
			
			virtual void setInitializedElement(std::shared_ptr<ocl::Expressions::Variable> _initializedElement) = 0;
			
			
			virtual std::shared_ptr<ocl::Evaluations::OclExpEval > getInstance() const = 0;
			
			
			virtual void setInstance(std::shared_ptr<ocl::Evaluations::OclExpEval> _instance) = 0;
			
			
			virtual std::weak_ptr<ocl::Expressions::CollectionRange > getLastOwner() const = 0;
			
			
			virtual void setLastOwner(std::shared_ptr<ocl::Expressions::CollectionRange> _lastOwner) = 0;
			
			
			virtual std::weak_ptr<ocl::Expressions::LoopExp > getLoopBodyOwner() const = 0;
			
			
			virtual void setLoopBodyOwner(std::shared_ptr<ocl::Expressions::LoopExp> _loopBodyOwner) = 0;
			
			
			virtual std::weak_ptr<ocl::Expressions::OperationCallExp > getParentCall() const = 0;
			
			
			virtual void setParentCall(std::shared_ptr<ocl::Expressions::OperationCallExp> _parentCall) = 0;
			
			
			virtual std::weak_ptr<ocl::Expressions::NavigationCallExp > getParentNav() const = 0;
			
			
			virtual void setParentNav(std::shared_ptr<ocl::Expressions::NavigationCallExp> _parentNav) = 0;
			
			
			virtual std::weak_ptr<ocl::Expressions::IfExp > getThenOwner() const = 0;
			
			
			virtual void setThenOwner(std::shared_ptr<ocl::Expressions::IfExp> _thenOwner) = 0;
			
			
			virtual std::weak_ptr<ocl::Expressions::ExpressionInOcl > getTopExpression() const = 0;
			
			
			virtual void setTopExpression(std::shared_ptr<ocl::Expressions::ExpressionInOcl> _topExpression) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			
			std::weak_ptr<ocl::Expressions::CallExp > m_appliedElement;
			std::weak_ptr<ocl::Expressions::IfExp > m_elseOwner;
			std::weak_ptr<ocl::Expressions::CollectionRange > m_firstOwner;
			std::weak_ptr<ocl::Expressions::IfExp > m_ifOwner;
			std::weak_ptr<ocl::Expressions::Variable > m_initializedElement;
			std::shared_ptr<ocl::Evaluations::OclExpEval > m_instance;
			std::weak_ptr<ocl::Expressions::CollectionRange > m_lastOwner;
			std::weak_ptr<ocl::Expressions::LoopExp > m_loopBodyOwner;
			std::weak_ptr<ocl::Expressions::OperationCallExp > m_parentCall;
			std::weak_ptr<ocl::Expressions::NavigationCallExp > m_parentNav;
			std::weak_ptr<ocl::Expressions::IfExp > m_thenOwner;
			std::weak_ptr<ocl::Expressions::ExpressionInOcl > m_topExpression;

		public:
			//*********************************
			// Union Getter
			//*********************************
			
			virtual std::shared_ptr<Union<ecore::EObject>> getEContens() const = 0;

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: OCL_EXPRESSIONS_OCLEXPRESSION_HPP */
