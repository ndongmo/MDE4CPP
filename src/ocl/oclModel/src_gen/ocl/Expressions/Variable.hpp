//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_EXPRESSIONS_VARIABLE_HPP
#define OCL_EXPRESSIONS_VARIABLE_HPP

#include <list>
#include <memory>
#include <string>


// forward declarations



//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace ocl
{
	class OclFactory;
}

//Forward Declaration for used types
namespace ecore 
{
	class EAnnotation;
}

namespace ecore 
{
	class EClassifier;
}

namespace ecore 
{
	class EGenericType;
}

namespace ecore 
{
	class EObject;
}

namespace ecore 
{
	class EParameter;
}

namespace ecore 
{
	class ETypedElement;
}

namespace ocl::Expressions 
{
	class ExpressionInOcl;
}

namespace ocl::Expressions 
{
	class IterateExp;
}

namespace ocl::Expressions 
{
	class LoopExp;
}

namespace ocl::Expressions 
{
	class OclExpression;
}

namespace fUML::Semantics::Values 
{
	class Value;
}

namespace ocl::Expressions 
{
	class VariableExp;
}

// base class includes
#include "ecore/ETypedElement.hpp"

// enum includes


//*********************************
namespace ocl::Expressions 
{
	/*!
	 */
	class Variable:virtual public ecore::ETypedElement
	{
		public:
 			Variable(const Variable &) {}
			Variable& operator=(Variable const&) = delete;

		protected:
			Variable(){}


			//Additional constructors for the containments back reference

			Variable(std::weak_ptr<ocl::Expressions::IterateExp > par_baseExp);

			//Additional constructors for the containments back reference

			Variable(std::weak_ptr<ecore::EObject > par_eContainer);

			//Additional constructors for the containments back reference

			Variable(std::weak_ptr<ocl::Expressions::LoopExp > par_loopExp);

			//Additional constructors for the containments back reference

			Variable(std::weak_ptr<ocl::Expressions::ExpressionInOcl > par_ExpressionInOcl, const int reference_id);

			//Additional constructors for the containments back reference


			//Additional constructors for the containments back reference


		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~Variable() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::weak_ptr<ocl::Expressions::IterateExp > getBaseExp() const = 0;
			
			/*!
			 */
			virtual void setBaseExp(std::shared_ptr<ocl::Expressions::IterateExp> _baseExp_baseExp) = 0;
			/*!
			 */
			virtual std::shared_ptr<ocl::Expressions::OclExpression > getInitExpression() const = 0;
			
			/*!
			 */
			virtual void setInitExpression(std::shared_ptr<ocl::Expressions::OclExpression> _initExpression_initExpression) = 0;
			/*!
			 */
			virtual std::weak_ptr<ocl::Expressions::LoopExp > getLoopExp() const = 0;
			
			/*!
			 */
			virtual void setLoopExp(std::shared_ptr<ocl::Expressions::LoopExp> _loopExp_loopExp) = 0;
			/*!
			 */
			virtual std::shared_ptr<ocl::Expressions::VariableExp > getReferringExp() const = 0;
			
			/*!
			 */
			virtual void setReferringExp(std::shared_ptr<ocl::Expressions::VariableExp> _referringExp_referringExp) = 0;
			/*!
			 */
			virtual std::shared_ptr<ecore::EParameter > getRepresentedParameter() const = 0;
			
			/*!
			 */
			virtual void setRepresentedParameter(std::shared_ptr<ecore::EParameter> _representedParameter_representedParameter) = 0;
			/*!
			 */
			virtual std::weak_ptr<ocl::Expressions::ExpressionInOcl > getResultOwner() const = 0;
			
			/*!
			 */
			virtual void setResultOwner(std::shared_ptr<ocl::Expressions::ExpressionInOcl> _resultOwner_resultOwner) = 0;
			/*!
			 */
			virtual std::weak_ptr<ocl::Expressions::ExpressionInOcl > getSelfOwner() const = 0;
			
			/*!
			 */
			virtual void setSelfOwner(std::shared_ptr<ocl::Expressions::ExpressionInOcl> _selfOwner_selfOwner) = 0;
			/*!
			 */
			virtual std::shared_ptr<fUML::Semantics::Values::Value > getValue() const = 0;
			
			/*!
			 */
			virtual void setValue(std::shared_ptr<fUML::Semantics::Values::Value> _value_value) = 0;
			/*!
			 */
			virtual std::weak_ptr<ocl::Expressions::ExpressionInOcl > getVarOwner() const = 0;
			
			/*!
			 */
			virtual void setVarOwner(std::shared_ptr<ocl::Expressions::ExpressionInOcl> _varOwner_varOwner) = 0;
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::weak_ptr<ocl::Expressions::IterateExp > m_baseExp;
			/*!
			 */
			std::shared_ptr<ocl::Expressions::OclExpression > m_initExpression;
			/*!
			 */
			std::weak_ptr<ocl::Expressions::LoopExp > m_loopExp;
			/*!
			 */
			std::shared_ptr<ocl::Expressions::VariableExp > m_referringExp;
			/*!
			 */
			std::shared_ptr<ecore::EParameter > m_representedParameter;
			/*!
			 */
			std::weak_ptr<ocl::Expressions::ExpressionInOcl > m_resultOwner;
			/*!
			 */
			std::weak_ptr<ocl::Expressions::ExpressionInOcl > m_selfOwner;
			/*!
			 */
			std::shared_ptr<fUML::Semantics::Values::Value > m_value;
			/*!
			 */
			std::weak_ptr<ocl::Expressions::ExpressionInOcl > m_varOwner;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<Union<ecore::EObject>> getEContens() const = 0;

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: OCL_EXPRESSIONS_VARIABLE_HPP */
