//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_EXPRESSIONS_VARIABLEVARIABLEIMPL_HPP
#define OCL_EXPRESSIONS_VARIABLEVARIABLEIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../Variable.hpp"

#include "ocl/Expressions/impl/ExpressionsFactoryImpl.hpp"
#include "ecore/impl/ETypedElementImpl.hpp"

//*********************************
namespace ocl::Expressions 
{
	class VariableImpl : virtual public ecore::ETypedElementImpl, virtual public Variable 
	{
		public: 
			VariableImpl(const VariableImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;    
			VariableImpl& operator=(VariableImpl const&);

		protected:
			friend class ocl::Expressions::ExpressionsFactoryImpl;
			VariableImpl();
			virtual std::shared_ptr<Variable> getThisVariablePtr() const;
			virtual void setThisVariablePtr(std::weak_ptr<Variable> thisVariablePtr);

			//Additional constructors for the containments back reference
			VariableImpl(std::weak_ptr<ocl::Expressions::IterateExp > par_baseExp);


			//Additional constructors for the containments back reference
			VariableImpl(std::weak_ptr<ecore::EObject > par_eContainer);


			//Additional constructors for the containments back reference
			VariableImpl(std::weak_ptr<ocl::Expressions::LoopExp > par_loopExp);


			//Additional constructors for the containments back reference
			VariableImpl(std::weak_ptr<ocl::Expressions::ExpressionInOcl > par_ExpressionInOcl, const int reference_id);


			//Additional constructors for the containments back reference


			//Additional constructors for the containments back reference




		public:
			//destructor
			virtual ~VariableImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			
			virtual std::weak_ptr<ocl::Expressions::IterateExp > getBaseExp() const ;
			
			
			virtual void setBaseExp(std::shared_ptr<ocl::Expressions::IterateExp> _baseExp) ;
			
			
			virtual std::shared_ptr<ocl::Expressions::OclExpression > getInitExpression() const ;
			
			
			virtual void setInitExpression(std::shared_ptr<ocl::Expressions::OclExpression> _initExpression) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::LoopExp > getLoopExp() const ;
			
			
			virtual void setLoopExp(std::shared_ptr<ocl::Expressions::LoopExp> _loopExp) ;
			
			
			virtual std::shared_ptr<ocl::Expressions::VariableExp > getReferringExp() const ;
			
			
			virtual void setReferringExp(std::shared_ptr<ocl::Expressions::VariableExp> _referringExp) ;
			
			
			virtual std::shared_ptr<ecore::EParameter > getRepresentedParameter() const ;
			
			
			virtual void setRepresentedParameter(std::shared_ptr<ecore::EParameter> _representedParameter) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::ExpressionInOcl > getResultOwner() const ;
			
			
			virtual void setResultOwner(std::shared_ptr<ocl::Expressions::ExpressionInOcl> _resultOwner) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::ExpressionInOcl > getSelfOwner() const ;
			
			
			virtual void setSelfOwner(std::shared_ptr<ocl::Expressions::ExpressionInOcl> _selfOwner) ;
			
			
			virtual std::shared_ptr<fUML::Semantics::Values::Value > getValue() const ;
			
			
			virtual void setValue(std::shared_ptr<fUML::Semantics::Values::Value> _value) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::ExpressionInOcl > getVarOwner() const ;
			
			
			virtual void setVarOwner(std::shared_ptr<ocl::Expressions::ExpressionInOcl> _varOwner) ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			
			virtual std::shared_ptr<Union<ecore::EObject>> getEContens() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;
			

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool internalEIsSet(int featureID) const ;
			virtual bool eSet(int featureID, Any newValue) ;

		private:
			std::weak_ptr<Variable> m_thisVariablePtr;
	};
}
#endif /* end of include guard: OCL_EXPRESSIONS_VARIABLEVARIABLEIMPL_HPP */
