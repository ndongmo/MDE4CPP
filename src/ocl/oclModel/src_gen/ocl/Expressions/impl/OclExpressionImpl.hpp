//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_EXPRESSIONS_OCLEXPRESSIONOCLEXPRESSIONIMPL_HPP
#define OCL_EXPRESSIONS_OCLEXPRESSIONOCLEXPRESSIONIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../OclExpression.hpp"

#include "ocl/Expressions/impl/ExpressionsFactoryImpl.hpp"
#include "ecore/impl/ETypedElementImpl.hpp"

//*********************************
namespace ocl::Expressions 
{
	class OclExpressionImpl : virtual public ecore::ETypedElementImpl, virtual public OclExpression 
	{
		public: 
			OclExpressionImpl(const OclExpressionImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;    
			OclExpressionImpl& operator=(OclExpressionImpl const&);

		protected:
			friend class ocl::Expressions::ExpressionsFactoryImpl;
			OclExpressionImpl();
			virtual std::shared_ptr<OclExpression> getThisOclExpressionPtr() const;
			virtual void setThisOclExpressionPtr(std::weak_ptr<OclExpression> thisOclExpressionPtr);

			//Additional constructors for the containments back reference
			OclExpressionImpl(std::weak_ptr<ocl::Expressions::CallExp > par_appliedElement);


			//Additional constructors for the containments back reference
			OclExpressionImpl(std::weak_ptr<ecore::EObject > par_eContainer);


			//Additional constructors for the containments back reference
			OclExpressionImpl(std::weak_ptr<ocl::Expressions::IfExp > par_IfExp, const int reference_id);


			//Additional constructors for the containments back reference
			OclExpressionImpl(std::weak_ptr<ocl::Expressions::CollectionRange > par_CollectionRange, const int reference_id);


			//Additional constructors for the containments back reference


			//Additional constructors for the containments back reference
			OclExpressionImpl(std::weak_ptr<ocl::Expressions::Variable > par_initializedElement);


			//Additional constructors for the containments back reference


			//Additional constructors for the containments back reference
			OclExpressionImpl(std::weak_ptr<ocl::Expressions::LoopExp > par_loopBodyOwner);


			//Additional constructors for the containments back reference
			OclExpressionImpl(std::weak_ptr<ocl::Expressions::OperationCallExp > par_parentCall);


			//Additional constructors for the containments back reference
			OclExpressionImpl(std::weak_ptr<ocl::Expressions::NavigationCallExp > par_parentNav);


			//Additional constructors for the containments back reference


			//Additional constructors for the containments back reference
			OclExpressionImpl(std::weak_ptr<ocl::Expressions::ExpressionInOcl > par_topExpression);




		public:
			//destructor
			virtual ~OclExpressionImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			
			virtual std::weak_ptr<ocl::Expressions::CallExp > getAppliedElement() const ;
			
			
			virtual void setAppliedElement(std::shared_ptr<ocl::Expressions::CallExp> _appliedElement) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::IfExp > getElseOwner() const ;
			
			
			virtual void setElseOwner(std::shared_ptr<ocl::Expressions::IfExp> _elseOwner) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::CollectionRange > getFirstOwner() const ;
			
			
			virtual void setFirstOwner(std::shared_ptr<ocl::Expressions::CollectionRange> _firstOwner) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::IfExp > getIfOwner() const ;
			
			
			virtual void setIfOwner(std::shared_ptr<ocl::Expressions::IfExp> _ifOwner) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::Variable > getInitializedElement() const ;
			
			
			virtual void setInitializedElement(std::shared_ptr<ocl::Expressions::Variable> _initializedElement) ;
			
			
			virtual std::shared_ptr<ocl::Evaluations::OclExpEval > getInstance() const ;
			
			
			virtual void setInstance(std::shared_ptr<ocl::Evaluations::OclExpEval> _instance) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::CollectionRange > getLastOwner() const ;
			
			
			virtual void setLastOwner(std::shared_ptr<ocl::Expressions::CollectionRange> _lastOwner) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::LoopExp > getLoopBodyOwner() const ;
			
			
			virtual void setLoopBodyOwner(std::shared_ptr<ocl::Expressions::LoopExp> _loopBodyOwner) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::OperationCallExp > getParentCall() const ;
			
			
			virtual void setParentCall(std::shared_ptr<ocl::Expressions::OperationCallExp> _parentCall) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::NavigationCallExp > getParentNav() const ;
			
			
			virtual void setParentNav(std::shared_ptr<ocl::Expressions::NavigationCallExp> _parentNav) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::IfExp > getThenOwner() const ;
			
			
			virtual void setThenOwner(std::shared_ptr<ocl::Expressions::IfExp> _thenOwner) ;
			
			
			virtual std::weak_ptr<ocl::Expressions::ExpressionInOcl > getTopExpression() const ;
			
			
			virtual void setTopExpression(std::shared_ptr<ocl::Expressions::ExpressionInOcl> _topExpression) ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			
			virtual std::shared_ptr<Union<ecore::EObject>> getEContens() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;
			

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool internalEIsSet(int featureID) const ;
			virtual bool eSet(int featureID, Any newValue) ;

		private:
			std::weak_ptr<OclExpression> m_thisOclExpressionPtr;
	};
}
#endif /* end of include guard: OCL_EXPRESSIONS_OCLEXPRESSIONOCLEXPRESSIONIMPL_HPP */
