//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_EXPRESSIONS_MESSAGEEXP_HPP
#define OCL_EXPRESSIONS_MESSAGEEXP_HPP

#include <list>
#include <memory>
#include <string>


// forward declarations
template<class T> class Bag; 



//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace ocl
{
	class oclFactory;
}

//Forward Declaration for used types
namespace ocl::Expressions 
{
	class CallExp;
}

namespace uml 
{
	class CallOperationAction;
}

namespace ocl::Expressions 
{
	class CollectionRange;
}

namespace ecore 
{
	class EAnnotation;
}

namespace ecore 
{
	class EClassifier;
}

namespace ecore 
{
	class EGenericType;
}

namespace ocl::Expressions 
{
	class ExpressionInOcl;
}

namespace ocl::Expressions 
{
	class IfExp;
}

namespace ocl::Expressions 
{
	class LoopExp;
}

namespace ocl::Expressions 
{
	class NavigationCallExp;
}

namespace ocl::Evaluations 
{
	class OclExpEval;
}

namespace ocl::Expressions 
{
	class OclExpression;
}

namespace ocl::Expressions 
{
	class OperationCallExp;
}

namespace uml 
{
	class SendSignalAction;
}

namespace ocl::Expressions 
{
	class Variable;
}

// base class includes
#include "ocl/Expressions/OclExpression.hpp"

// enum includes


//*********************************
namespace ocl::Expressions 
{
	
	class MessageExp:virtual public OclExpression
	{
		public:
 			MessageExp(const MessageExp &) {}

		protected:
			MessageExp(){}


		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~MessageExp() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			
			virtual std::shared_ptr<Bag<ocl::Expressions::OclExpression>> getArgument() const = 0;
			
			
			
			virtual std::shared_ptr<uml::CallOperationAction > getCalledOperation() const = 0;
			
			
			virtual void setCalledOperation(std::shared_ptr<uml::CallOperationAction> _calledOperation) = 0;
			
			
			virtual std::shared_ptr<uml::SendSignalAction > getSentSignal() const = 0;
			
			
			virtual void setSentSignal(std::shared_ptr<uml::SendSignalAction> _sentSignal) = 0;
			
			
			virtual std::shared_ptr<ocl::Expressions::OclExpression > getTarget() const = 0;
			
			
			virtual void setTarget(std::shared_ptr<ocl::Expressions::OclExpression> _target) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			
			mutable std::shared_ptr<Bag<ocl::Expressions::OclExpression>> m_argument;
			std::shared_ptr<uml::CallOperationAction > m_calledOperation;
			std::shared_ptr<uml::SendSignalAction > m_sentSignal;
			std::shared_ptr<ocl::Expressions::OclExpression > m_target;

		public:
			//*********************************
			// Union Getter
			//*********************************
			

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: OCL_EXPRESSIONS_MESSAGEEXP_HPP */
