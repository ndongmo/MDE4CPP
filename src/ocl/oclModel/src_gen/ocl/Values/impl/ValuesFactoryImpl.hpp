//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_VALUESFACTORYIMPL_HPP
#define OCL_VALUESFACTORYIMPL_HPP

#include "ecore/impl/EFactoryImpl.hpp"

#include "ocl/Values/ValuesFactory.hpp"

namespace Values 
{	class BagTypeValue;
	class CollectionValue;
	class Element;
	class LocalSnapshot;
	class NameValueBinding;
	class ObjectValue;
	class OclMessageValue;
	class OclVoidValue;
	class OrderedSetTypeValue;
	class SequenceTypeValue;
	class SetTypeValue;
	class StaticValue;
	class TupleValue;
	class UndefinedValue;
}

namespace ocl::Values 
{
	class ValuesFactoryImpl : virtual public ecore::EFactoryImpl , virtual public ValuesFactory 
	{
		private:    
			ValuesFactoryImpl(ValuesFactoryImpl const&) = delete;
			ValuesFactoryImpl& operator=(ValuesFactoryImpl const&) = delete;

		protected:
			friend class ValuesFactory;
			// Constructor
			ValuesFactoryImpl();

		public:
			virtual ~ValuesFactoryImpl();
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const;

			//Creator functions
			 virtual std::shared_ptr<ocl::Values::BagTypeValue> createBagTypeValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::CollectionValue> createCollectionValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::Element> createElement(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::LocalSnapshot> createLocalSnapshot(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::NameValueBinding> createNameValueBinding(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::ObjectValue> createObjectValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::OclMessageValue> createOclMessageValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::OclVoidValue> createOclVoidValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::OrderedSetTypeValue> createOrderedSetTypeValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::SequenceTypeValue> createSequenceTypeValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::SetTypeValue> createSetTypeValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::StaticValue> createStaticValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::TupleValue> createTupleValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<ocl::Values::UndefinedValue> createUndefinedValue(const int metaElementID=-1) const ;
			 
			 

		private:
			static ValuesFactory* create();
            std::map<std::string,int> m_idMap;
	};
}
#endif /* end of include guard: OCL_VALUESFACTORYIMPL_HPP */
